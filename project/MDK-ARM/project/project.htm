<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [project\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image project\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Apr 16 23:32:30 2025
<BR><P>
<H3>Maximum Stack Usage =       1640 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Esp8266_Rec_Work &rArr;  Esp8266_Rec_Work (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[5]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">BusFault_Handler</a><BR>
 <LI><a href="#[47]">Esp8266_Rec_Work</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">Esp8266_Rec_Work</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[4]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">MemManage_Handler</a><BR>
 <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[c5]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c5]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[6]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[41]">DHT11_Work</a> from work.o(i.DHT11_Work) referenced from scheduler.o(i.createTask)
 <LI><a href="#[16]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[47]">Esp8266_Rec_Work</a> from work.o(i.Esp8266_Rec_Work) referenced from scheduler.o(i.createTask)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C1_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[43]">OLED_Work</a> from work.o(i.OLED_Work) referenced from scheduler.o(i.createTask)
 <LI><a href="#[c]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from stm32f1xx_it.o(i.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[46]">PhotoSensor_Work</a> from work.o(i.PhotoSensor_Work) referenced from scheduler.o(i.createTask)
 <LI><a href="#[10]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[45]">SNR_Work</a> from work.o(i.SNR_Work) referenced from scheduler.o(i.createTask)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from stm32f1xx_it.o(i.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[d]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">TIM4_IRQHandler</a> from stm32f1xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[44]">TOF_Work</a> from work.o(i.TOF_Work) referenced from scheduler.o(i.createTask)
 <LI><a href="#[3e]">UART_DMAAbortOnError</a> from stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from stm32f1xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">USART3_IRQHandler</a> from stm32f1xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[35]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[38]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[3a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[39]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[40]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[49]">createTask</a> from scheduler.o(i.createTask) referenced from scheduler.o(i.initTask)
 <LI><a href="#[3f]">fputc</a> from main.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3d]">initTask</a> from scheduler.o(i.initTask) referenced from scheduler.o(i.FreeRTOS_Start)
 <LI><a href="#[3c]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[36]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[42]">play_music</a> from buzzer.o(i.play_music) referenced from scheduler.o(i.createTask)
 <LI><a href="#[48]">printTask</a> from scheduler.o(i.printTask) referenced from scheduler.o(i.createTask)
 <LI><a href="#[4b]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4a]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[38]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[1d0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1d1]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1d2]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1d3]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1d4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1d5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f7]"></a>vPortSVCHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[1cb]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4e]"></a>xPortPendSVHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1d6]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1d7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_start_single_test
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[83]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
</UL>

<P><STRONG><a name="[84]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
</UL>

<P><STRONG><a name="[ed]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
</UL>

<P><STRONG><a name="[156]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_check_part_used
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_range_status_string
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_error_string
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_device_info
</UL>

<P><STRONG><a name="[56]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
</UL>

<P><STRONG><a name="[58]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[71]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[5a]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_music
</UL>

<P><STRONG><a name="[f3]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[1dc]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Run_Angle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Run_Angle
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[1dd]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Run_Angle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_music
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Run_Angle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Work
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Work
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1df]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1e0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[57]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[39]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1e1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[69]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[63]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[62]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[72]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1e3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[75]"></a>ADC_Enable</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[5]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DHT11_Work</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, work.o(i.DHT11_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DHT11_Work &rArr; dht11_read_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[8]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[7a]"></a>Esp8266_Init</STRONG> (Thumb, 448 bytes, Stack size 32 bytes, esp8266.o(i.Esp8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Esp8266_Init &rArr; Esp8266_Pub_Msg &rArr; Esp8266_Send_Cmd &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Pub_Msg
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[7f]"></a>Esp8266_Pub_Msg</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, esp8266.o(i.Esp8266_Pub_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Esp8266_Pub_Msg &rArr; Esp8266_Send_Cmd &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
</UL>

<P><STRONG><a name="[47]"></a>Esp8266_Rec_Work</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, work.o(i.Esp8266_Rec_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + In Cycle
<LI>Call Chain = Esp8266_Rec_Work &rArr;  Esp8266_Rec_Work (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Rec_Work
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Rec_Work
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[80]"></a>Esp8266_Receive_Msg</STRONG> (Thumb, 126 bytes, Stack size 784 bytes, esp8266.o(i.Esp8266_Receive_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = Esp8266_Receive_Msg &rArr; Parse_Json_Msg &rArr; Esp8266_Pub_Msg &rArr; Esp8266_Send_Cmd &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Rec_Work
</UL>

<P><STRONG><a name="[7d]"></a>Esp8266_Send_Cmd</STRONG> (Thumb, 142 bytes, Stack size 536 bytes, esp8266.o(i.Esp8266_Send_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Esp8266_Send_Cmd &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Pub_Msg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
</UL>

<P><STRONG><a name="[88]"></a>FreeRTOS_Start</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, scheduler.o(i.FreeRTOS_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FreeRTOS_Start &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>Get_ADC_Value</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, photosensor.o(i.Get_ADC_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Get_ADC_Value &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[d8]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[90]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[91]"></a>HAL_ADC_Init</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[92]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[8f]"></a>HAL_ADC_Start</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
</UL>

<P><STRONG><a name="[c8]"></a>HAL_DMA_Abort</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f1xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[7c]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_1_2
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Pub_Msg
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_music
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_rst
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_reset
</UL>

<P><STRONG><a name="[93]"></a>HAL_GPIO_Init</STRONG> (Thumb, 446 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_io_out
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_io_in
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_OUT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_IN
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_i2c_init
</UL>

<P><STRONG><a name="[177]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_bit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_check
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_READ_SDA
</UL>

<P><STRONG><a name="[19e]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTask
</UL>

<P><STRONG><a name="[da]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_1_2
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_rst
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedStatus
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_reset
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_i2c_init
</UL>

<P><STRONG><a name="[74]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[bd]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[94]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>HAL_InitTick</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, stm32f1xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9c]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[9d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[95]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[98]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[99]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[a2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[af]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[9b]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ab]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[b8]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_music
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;play_music
</UL>

<P><STRONG><a name="[ae]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>HAL_UARTEx_ReceiveToIdle_IT</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, stm32f1xx_hal_uart.o(i.HAL_UARTEx_ReceiveToIdle_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_ReceiveToIdle_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, work.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UARTEx_RxEventCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[c7]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[c3]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_UART_MspInit</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[87]"></a>HAL_UART_Transmit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>JSON_SearchConst</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, core_json.o(i.JSON_SearchConst))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = JSON_SearchConst &rArr; multiSearch &rArr; objectSearch &rArr; nextKeyValuePair &rArr; nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSearch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getType
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_SearchT
</UL>

<P><STRONG><a name="[d1]"></a>JSON_SearchT</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, core_json.o(i.JSON_SearchT))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = JSON_SearchT &rArr; JSON_SearchConst &rArr; multiSearch &rArr; objectSearch &rArr; nextKeyValuePair &rArr; nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_SearchConst
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
</UL>

<P><STRONG><a name="[d2]"></a>JSON_Validate</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, core_json.o(i.JSON_Validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = JSON_Validate &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCollection
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
</UL>

<P><STRONG><a name="[d6]"></a>MX_ADC1_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>MX_GPIO_Init</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>MX_TIM1_Init</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>MX_TIM2_Init</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>MX_TIM3_Init</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>OLED_Clear</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, oled.o(i.OLED_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Clear &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[e6]"></a>OLED_I2C_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, oled.o(i.OLED_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_I2C_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e7]"></a>OLED_I2C_SendByte</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, oled.o(i.OLED_I2C_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[e8]"></a>OLED_I2C_Start</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled.o(i.OLED_I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[e9]"></a>OLED_I2C_Stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, oled.o(i.OLED_I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OLED_I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>

<P><STRONG><a name="[ea]"></a>OLED_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, oled.o(i.OLED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OLED_Init &rArr; OLED_I2C_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[e4]"></a>OLED_SetCursor</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oled.o(i.OLED_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[ec]"></a>OLED_ShowChar</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WriteData
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
</UL>

<P><STRONG><a name="[7b]"></a>OLED_ShowString</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, oled.o(i.OLED_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Work
</UL>

<P><STRONG><a name="[43]"></a>OLED_Work</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, work.o(i.OLED_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_Work &rArr; OLED_ShowString &rArr; OLED_ShowChar &rArr; OLED_SetCursor &rArr; OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowString
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[eb]"></a>OLED_WriteCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_WriteCommand &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SetCursor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[e5]"></a>OLED_WriteData</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, oled.o(i.OLED_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_WriteData &rArr; OLED_I2C_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Stop
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_Start
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_I2C_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
</UL>

<P><STRONG><a name="[85]"></a>Parse_Json_Msg</STRONG> (Thumb, 630 bytes, Stack size 200 bytes, esp8266.o(i.Parse_Json_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = Parse_Json_Msg &rArr; Esp8266_Pub_Msg &rArr; Esp8266_Send_Cmd &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetServoAngle
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Validate
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_SearchT
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Pub_Msg
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>PhotoSensor_Get_LightIntensity</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, photosensor.o(i.PhotoSensor_Get_LightIntensity))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PhotoSensor_Get_LightIntensity &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ADC_Value
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Work
</UL>

<P><STRONG><a name="[46]"></a>PhotoSensor_Work</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, work.o(i.PhotoSensor_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = PhotoSensor_Work &rArr; PhotoSensor_Get_LightIntensity &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[45]"></a>SNR_Work</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, work.o(i.SNR_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SNR_Work &rArr; SetMotorSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Run_Angle
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorSpeed
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLedStatus
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SVC_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSVCHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>SetLedStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peripheral.o(i.SetLedStatus))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
</UL>

<P><STRONG><a name="[ee]"></a>SetMotorSpeed</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, peripheral.o(i.SetMotorSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetMotorSpeed &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
</UL>

<P><STRONG><a name="[f0]"></a>SetServoAngle</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, peripheral.o(i.SetServoAngle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SetServoAngle &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
</UL>

<P><STRONG><a name="[f9]"></a>StepMotor_1_2</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotor_1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StepMotor_1_2 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_One_Step
</UL>

<P><STRONG><a name="[fa]"></a>StepMotor_One_Step</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stepmotor.o(i.StepMotor_One_Step))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StepMotor_One_Step &rArr; StepMotor_1_2 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_1_2
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_Run_Angle
</UL>

<P><STRONG><a name="[f6]"></a>StepMotor_Run_Angle</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stepmotor.o(i.StepMotor_Run_Angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StepMotor_Run_Angle &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StepMotor_One_Step
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>SystemClock_Config</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>System_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, work.o(i.System_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = System_init &rArr; vl53l0x_general_start &rArr; vl53l0x_set_mode &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_general_start
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTask
</UL>

<P><STRONG><a name="[29]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[bb]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[a6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b5]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[44]"></a>TOF_Work</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, work.o(i.TOF_Work))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = TOF_Work &rArr; vl53l0x_general_test &rArr; vl53l0x_start_single_test &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_general_test
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[bf]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_ReceiveToIdle_IT
</UL>

<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>VL53L0X_CheckAndLoadInterruptSettings</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_CheckAndLoadInterruptSettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VL53L0X_CheckAndLoadInterruptSettings &rArr; VL53L0X_GetInterruptThresholds &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptThresholds
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
</UL>

<P><STRONG><a name="[107]"></a>VL53L0X_ClearInterruptMask</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_ClearInterruptMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L0X_ClearInterruptMask &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
</UL>

<P><STRONG><a name="[109]"></a>VL53L0X_DataInit</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, vl53l0x_api.o(i.VL53L0X_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = VL53L0X_DataInit &rArr; VL53L0X_GetDeviceParameters &rArr; VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckValue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_reset
</UL>

<P><STRONG><a name="[10f]"></a>VL53L0X_GetDeviceInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VL53L0X_GetDeviceInfo &rArr; VL53L0X_get_device_info &rArr; VL53L0X_check_part_used &rArr; VL53L0X_get_info_from_device &rArr; VL53L0X_device_read_strobe &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_device_info
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
</UL>

<P><STRONG><a name="[10b]"></a>VL53L0X_GetDeviceParameters</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_GetDeviceParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L0X_GetDeviceParameters &rArr; VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetXTalkCompensationRateMegaCps
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetWrapAroundCheckEnable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetOffsetCalibrationDataMicroMeter
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckValue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckEnable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterMeasurementPeriodMilliSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
</UL>

<P><STRONG><a name="[118]"></a>VL53L0X_GetFractionEnable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vl53l0x_api.o(i.VL53L0X_GetFractionEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_GetFractionEnable &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[111]"></a>VL53L0X_GetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_GetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L0X_GetInterMeasurementPeriodMilliSeconds &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[11b]"></a>VL53L0X_GetInterruptMaskStatus</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_GetInterruptMaskStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementDataReady
</UL>

<P><STRONG><a name="[104]"></a>VL53L0X_GetInterruptThresholds</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_GetInterruptThresholds))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L0X_GetInterruptThresholds &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>

<P><STRONG><a name="[115]"></a>VL53L0X_GetLimitCheckEnable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetLimitCheckEnable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[114]"></a>VL53L0X_GetLimitCheckValue</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_GetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[11c]"></a>VL53L0X_GetMeasurementDataReady</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_GetMeasurementDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = VL53L0X_GetMeasurementDataReady &rArr; VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptMaskStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
</UL>

<P><STRONG><a name="[117]"></a>VL53L0X_GetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_measurement_timing_budget_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[113]"></a>VL53L0X_GetOffsetCalibrationDataMicroMeter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetOffsetCalibrationDataMicroMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L0X_GetOffsetCalibrationDataMicroMeter &rArr; VL53L0X_get_offset_calibration_data_micro_meter &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_offset_calibration_data_micro_meter
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[11f]"></a>VL53L0X_GetPalErrorString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetPalErrorString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_GetPalErrorString &rArr; VL53L0X_get_pal_error_string
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_error_string
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pal_error
</UL>

<P><STRONG><a name="[121]"></a>VL53L0X_GetRangeStatusString</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetRangeStatusString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_GetRangeStatusString &rArr; VL53L0X_get_range_status_string
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_range_status_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_start_single_test
</UL>

<P><STRONG><a name="[123]"></a>VL53L0X_GetRangingMeasurementData</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, vl53l0x_api.o(i.VL53L0X_GetRangingMeasurementData))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
</UL>

<P><STRONG><a name="[126]"></a>VL53L0X_GetSequenceStepEnables</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_GetSequenceStepEnables))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_GetSequenceStepEnables &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sequence_step_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_measurement_timing_budget_micro_seconds
</UL>

<P><STRONG><a name="[128]"></a>VL53L0X_GetVcselPulsePeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetVcselPulsePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_GetVcselPulsePeriod &rArr; VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_vcsel_pulse_period
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>

<P><STRONG><a name="[116]"></a>VL53L0X_GetWrapAroundCheckEnable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_GetWrapAroundCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_GetWrapAroundCheckEnable &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[159]"></a>VL53L0X_GetXTalkCompensationEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_GetXTalkCompensationEnable))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_xtalk_rate
</UL>

<P><STRONG><a name="[112]"></a>VL53L0X_GetXTalkCompensationRateMegaCps</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_GetXTalkCompensationRateMegaCps))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L0X_GetXTalkCompensationRateMegaCps &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>

<P><STRONG><a name="[12a]"></a>VL53L0X_PerformRefCalibration</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_PerformRefCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = VL53L0X_PerformRefCalibration &rArr; VL53L0X_perform_ref_calibration &rArr; VL53L0X_perform_vhv_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[12c]"></a>VL53L0X_PerformRefSpadManagement</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_PerformRefSpadManagement))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = VL53L0X_PerformRefSpadManagement &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[12e]"></a>VL53L0X_PerformSingleMeasurement</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_PerformSingleMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = VL53L0X_PerformSingleMeasurement &rArr; VL53L0X_StartMeasurement &rArr; VL53L0X_CheckAndLoadInterruptSettings &rArr; VL53L0X_GetInterruptThresholds &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
</UL>

<P><STRONG><a name="[131]"></a>VL53L0X_PerformSingleRangingMeasurement</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_PerformSingleRangingMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetDeviceMode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_start_single_test
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
</UL>

<P><STRONG><a name="[158]"></a>VL53L0X_PollingDelay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_PollingDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_PollingDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
</UL>

<P><STRONG><a name="[108]"></a>VL53L0X_RdByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_device_read_strobe
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_vcsel_pulse_period
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_device_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetWrapAroundCheckEnable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementDataReady
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptMaskStatus
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetFractionEnable
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>

<P><STRONG><a name="[11a]"></a>VL53L0X_RdDWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_RdDWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_RdDWord &rArr; VL53L0X_read_dword &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_dword
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[119]"></a>VL53L0X_RdWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_word
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_offset_calibration_data_micro_meter
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetXTalkCompensationRateMegaCps
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckValue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterruptThresholds
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[124]"></a>VL53L0X_ReadMulti</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_ReadMulti &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ref_spad_map
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[137]"></a>VL53L0X_SetDeviceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetDeviceAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_SetDeviceAddress &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
</UL>

<P><STRONG><a name="[132]"></a>VL53L0X_SetDeviceMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[138]"></a>VL53L0X_SetGpioConfig</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_SetGpioConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L0X_SetGpioConfig &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[10d]"></a>VL53L0X_SetLimitCheckEnable</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_SetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53L0X_SetLimitCheckEnable &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
</UL>

<P><STRONG><a name="[10e]"></a>VL53L0X_SetLimitCheckValue</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_SetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L0X_SetLimitCheckValue &rArr; VL53L0X_WrWord &rArr; VL53L0X_write_word &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
</UL>

<P><STRONG><a name="[13a]"></a>VL53L0X_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_set_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
</UL>

<P><STRONG><a name="[13c]"></a>VL53L0X_SetOffsetCalibrationDataMicroMeter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetOffsetCalibrationDataMicroMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_SetOffsetCalibrationDataMicroMeter &rArr; VL53L0X_set_offset_calibration_data_micro_meter &rArr; VL53L0X_WrWord &rArr; VL53L0X_write_word &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_offset_calibration_data_micro_meter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[13e]"></a>VL53L0X_SetRefCalibration</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetRefCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L0X_SetRefCalibration &rArr; VL53L0X_set_ref_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_ref_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[140]"></a>VL53L0X_SetReferenceSpads</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetReferenceSpads))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_SetReferenceSpads &rArr; VL53L0X_set_reference_spads &rArr; enable_ref_spads &rArr; get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[142]"></a>VL53L0X_SetSequenceStepEnable</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, vl53l0x_api.o(i.VL53L0X_SetSequenceStepEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = VL53L0X_SetSequenceStepEnable &rArr; VL53L0X_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_set_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
</UL>

<P><STRONG><a name="[143]"></a>VL53L0X_SetVcselPulsePeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_api.o(i.VL53L0X_SetVcselPulsePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = VL53L0X_SetVcselPulsePeriod &rArr; VL53L0X_set_vcsel_pulse_period &rArr; VL53L0X_perform_phase_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[145]"></a>VL53L0X_SetXTalkCompensationRateMegaCps</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vl53l0x_api.o(i.VL53L0X_SetXTalkCompensationRateMegaCps))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = VL53L0X_SetXTalkCompensationRateMegaCps &rArr; VL53L0X_WrWord &rArr; VL53L0X_write_word &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[12f]"></a>VL53L0X_StartMeasurement</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, vl53l0x_api.o(i.VL53L0X_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = VL53L0X_StartMeasurement &rArr; VL53L0X_CheckAndLoadInterruptSettings &rArr; VL53L0X_GetInterruptThresholds &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
</UL>

<P><STRONG><a name="[146]"></a>VL53L0X_StaticInit</STRONG> (Thumb, 366 bytes, Stack size 104 bytes, vl53l0x_api.o(i.VL53L0X_StaticInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetFractionEnable
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[10a]"></a>VL53L0X_UpdateByte</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vl53l0x_platform.o(i.VL53L0X_UpdateByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_byte
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
</UL>

<P><STRONG><a name="[106]"></a>VL53L0X_WrByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetDeviceAddress
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_device_read_strobe
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StartMeasurement
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetSequenceStepEnable
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetGpioConfig
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>

<P><STRONG><a name="[139]"></a>VL53L0X_WrWord</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_WrWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_WrWord &rArr; VL53L0X_write_word &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_word
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetXTalkCompensationRateMegaCps
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckValue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_offset_calibration_data_micro_meter
</UL>

<P><STRONG><a name="[14b]"></a>VL53L0X_WriteMulti</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l0x_platform.o(i.VL53L0X_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L0X_WriteMulti &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ref_spad_map
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_load_tuning_settings
</UL>

<P><STRONG><a name="[14d]"></a>VL53L0X_calc_dmax</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, vl53l0x_api_core.o(i.VL53L0X_calc_dmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L0X_calc_dmax
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_isqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
</UL>

<P><STRONG><a name="[153]"></a>VL53L0X_calc_macro_period_ps</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vl53l0x_api_core.o(i.VL53L0X_calc_macro_period_ps))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_us
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_mclks
</UL>

<P><STRONG><a name="[14f]"></a>VL53L0X_calc_sigma_estimate</STRONG> (Thumb, 538 bytes, Stack size 80 bytes, vl53l0x_api_core.o(i.VL53L0X_calc_sigma_estimate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_calc_sigma_estimate &rArr; VL53L0X_get_total_signal_rate &rArr; VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_isqrt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_xtalk_rate
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_mclks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_dmax
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_signal_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_pal_range_status
</UL>

<P><STRONG><a name="[152]"></a>VL53L0X_calc_timeout_mclks</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, vl53l0x_api_core.o(i.VL53L0X_calc_timeout_mclks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VL53L0X_calc_timeout_mclks
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_macro_period_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
</UL>

<P><STRONG><a name="[154]"></a>VL53L0X_calc_timeout_us</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, vl53l0x_api_core.o(i.VL53L0X_calc_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = VL53L0X_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_macro_period_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>

<P><STRONG><a name="[155]"></a>VL53L0X_check_part_used</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vl53l0x_api_strings.o(i.VL53L0X_check_part_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = VL53L0X_check_part_used &rArr; VL53L0X_get_info_from_device &rArr; VL53L0X_device_read_strobe &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_device_info
</UL>

<P><STRONG><a name="[193]"></a>VL53L0X_decode_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l0x_api_core.o(i.VL53L0X_decode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>

<P><STRONG><a name="[15a]"></a>VL53L0X_decode_vcsel_period</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l0x_api_core.o(i.VL53L0X_decode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_vcsel_pulse_period
</UL>

<P><STRONG><a name="[157]"></a>VL53L0X_device_read_strobe</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vl53l0x_api_core.o(i.VL53L0X_device_read_strobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L0X_device_read_strobe &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_info_from_device
</UL>

<P><STRONG><a name="[1b8]"></a>VL53L0X_encode_timeout</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, vl53l0x_api_core.o(i.VL53L0X_encode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
</UL>

<P><STRONG><a name="[168]"></a>VL53L0X_encode_vcsel_period</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0x_api_core.o(i.VL53L0X_encode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
</UL>

<P><STRONG><a name="[110]"></a>VL53L0X_get_device_info</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vl53l0x_api_strings.o(i.VL53L0X_get_device_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VL53L0X_get_device_info &rArr; VL53L0X_check_part_used &rArr; VL53L0X_get_info_from_device &rArr; VL53L0X_device_read_strobe &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_check_part_used
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceInfo
</UL>

<P><STRONG><a name="[147]"></a>VL53L0X_get_info_from_device</STRONG> (Thumb, 1320 bytes, Stack size 120 bytes, vl53l0x_api_core.o(i.VL53L0X_get_info_from_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = VL53L0X_get_info_from_device &rArr; VL53L0X_device_read_strobe &rArr; VL53L0X_WrByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PollingDelay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_device_read_strobe
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_check_part_used
</UL>

<P><STRONG><a name="[11d]"></a>VL53L0X_get_measurement_timing_budget_micro_seconds</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, vl53l0x_api_core.o(i.VL53L0X_get_measurement_timing_budget_micro_seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[11e]"></a>VL53L0X_get_offset_calibration_data_micro_meter</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l0x_api_calibration.o(i.VL53L0X_get_offset_calibration_data_micro_meter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L0X_get_offset_calibration_data_micro_meter &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetOffsetCalibrationDataMicroMeter
</UL>

<P><STRONG><a name="[120]"></a>VL53L0X_get_pal_error_string</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, vl53l0x_api_strings.o(i.VL53L0X_get_pal_error_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_get_pal_error_string
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetPalErrorString
</UL>

<P><STRONG><a name="[125]"></a>VL53L0X_get_pal_range_status</STRONG> (Thumb, 486 bytes, Stack size 96 bytes, vl53l0x_api_core.o(i.VL53L0X_get_pal_range_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckValue
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[122]"></a>VL53L0X_get_range_status_string</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l0x_api_strings.o(i.VL53L0X_get_range_status_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L0X_get_range_status_string
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangeStatusString
</UL>

<P><STRONG><a name="[150]"></a>VL53L0X_get_total_signal_rate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vl53l0x_api_core.o(i.VL53L0X_get_total_signal_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L0X_get_total_signal_rate &rArr; VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
</UL>

<P><STRONG><a name="[151]"></a>VL53L0X_get_total_xtalk_rate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vl53l0x_api_core.o(i.VL53L0X_get_total_xtalk_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L0X_get_total_xtalk_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetXTalkCompensationEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_total_signal_rate
</UL>

<P><STRONG><a name="[129]"></a>VL53L0X_get_vcsel_pulse_period</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, vl53l0x_api_core.o(i.VL53L0X_get_vcsel_pulse_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_get_vcsel_pulse_period &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_decode_vcsel_period
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
</UL>

<P><STRONG><a name="[15b]"></a>VL53L0X_i2c_init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, vl53l0x_i2c.o(i.VL53L0X_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L0X_i2c_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
</UL>

<P><STRONG><a name="[14e]"></a>VL53L0X_isqrt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, vl53l0x_api_core.o(i.VL53L0X_isqrt))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_sigma_estimate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_dmax
</UL>

<P><STRONG><a name="[105]"></a>VL53L0X_load_tuning_settings</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, vl53l0x_api_core.o(i.VL53L0X_load_tuning_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_load_tuning_settings &rArr; VL53L0X_WriteMulti &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_CheckAndLoadInterruptSettings
</UL>

<P><STRONG><a name="[130]"></a>VL53L0X_measurement_poll_for_completion</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, vl53l0x_api_core.o(i.VL53L0X_measurement_poll_for_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = VL53L0X_measurement_poll_for_completion &rArr; VL53L0X_GetMeasurementDataReady &rArr; VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PollingDelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetMeasurementDataReady
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleMeasurement
</UL>

<P><STRONG><a name="[15c]"></a>VL53L0X_perform_phase_calibration</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(i.VL53L0X_perform_phase_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = VL53L0X_perform_phase_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>

<P><STRONG><a name="[12b]"></a>VL53L0X_perform_ref_calibration</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vl53l0x_api_calibration.o(i.VL53L0X_perform_ref_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = VL53L0X_perform_ref_calibration &rArr; VL53L0X_perform_vhv_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefCalibration
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[12d]"></a>VL53L0X_perform_ref_spad_management</STRONG> (Thumb, 542 bytes, Stack size 136 bytes, vl53l0x_api_calibration.o(i.VL53L0X_perform_ref_spad_management))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ref_spad_map
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_ref_signal_measurement
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_aperture
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_good_spad
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spad_bit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefSpadManagement
</UL>

<P><STRONG><a name="[15d]"></a>VL53L0X_perform_single_ref_calibration</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l0x_api_calibration.o(i.VL53L0X_perform_single_ref_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L0X_perform_single_ref_calibration &rArr; VL53L0X_measurement_poll_for_completion &rArr; VL53L0X_GetMeasurementDataReady &rArr; VL53L0X_GetInterruptMaskStatus &rArr; VL53L0X_RdByte &rArr; VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_measurement_poll_for_completion
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ClearInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
</UL>

<P><STRONG><a name="[15f]"></a>VL53L0X_perform_vhv_calibration</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(i.VL53L0X_perform_vhv_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = VL53L0X_perform_vhv_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_single_ref_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_calibration
</UL>

<P><STRONG><a name="[133]"></a>VL53L0X_read_byte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l0x_i2c.o(i.VL53L0X_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L0X_read_byte &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>

<P><STRONG><a name="[134]"></a>VL53L0X_read_dword</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL53L0X_read_dword))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_read_dword &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdDWord
</UL>

<P><STRONG><a name="[136]"></a>VL53L0X_read_multi</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL53L0X_read_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_word
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_dword
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_byte
</UL>

<P><STRONG><a name="[135]"></a>VL53L0X_read_word</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL53L0X_read_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>

<P><STRONG><a name="[15e]"></a>VL53L0X_ref_calibration_io</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, vl53l0x_api_calibration.o(i.VL53L0X_ref_calibration_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_vhv_calibration
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_ref_calibration
</UL>

<P><STRONG><a name="[13b]"></a>VL53L0X_set_measurement_timing_budget_micro_seconds</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, vl53l0x_api_core.o(i.VL53L0X_set_measurement_timing_budget_micro_seconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_set_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[13d]"></a>VL53L0X_set_offset_calibration_data_micro_meter</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vl53l0x_api_calibration.o(i.VL53L0X_set_offset_calibration_data_micro_meter))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L0X_set_offset_calibration_data_micro_meter &rArr; VL53L0X_WrWord &rArr; VL53L0X_write_word &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetOffsetCalibrationDataMicroMeter
</UL>

<P><STRONG><a name="[13f]"></a>VL53L0X_set_ref_calibration</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, vl53l0x_api_calibration.o(i.VL53L0X_set_ref_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = VL53L0X_set_ref_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ref_calibration_io
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetRefCalibration
</UL>

<P><STRONG><a name="[141]"></a>VL53L0X_set_reference_spads</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, vl53l0x_api_calibration.o(i.VL53L0X_set_reference_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = VL53L0X_set_reference_spads &rArr; enable_ref_spads &rArr; get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_aperture
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetReferenceSpads
</UL>

<P><STRONG><a name="[144]"></a>VL53L0X_set_vcsel_pulse_period</STRONG> (Thumb, 544 bytes, Stack size 40 bytes, vl53l0x_api_core.o(i.VL53L0X_set_vcsel_pulse_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = VL53L0X_set_vcsel_pulse_period &rArr; VL53L0X_perform_phase_calibration &rArr; VL53L0X_ref_calibration_io &rArr; VL53L0X_UpdateByte &rArr; VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_encode_vcsel_period
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_phase_calibration
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sequence_step_timeout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sequence_step_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetVcselPulsePeriod
</UL>

<P><STRONG><a name="[149]"></a>VL53L0X_write_byte</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL53L0X_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_write_byte &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_UpdateByte
</UL>

<P><STRONG><a name="[14c]"></a>VL53L0X_write_multi</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL53L0X_write_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Write_nByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_word
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_byte
</UL>

<P><STRONG><a name="[14a]"></a>VL53L0X_write_word</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL53L0X_write_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L0X_write_word &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
</UL>

<P><STRONG><a name="[16a]"></a>VL_IIC_Ack</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vl53l0x_i2c.o(i.VL_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL_IIC_Ack &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_OUT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[16f]"></a>VL_IIC_NAck</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vl53l0x_i2c.o(i.VL_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_OUT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[170]"></a>VL_IIC_Read_Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_IN
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_READ_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_nByte
</UL>

<P><STRONG><a name="[166]"></a>VL_IIC_Read_nByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, vl53l0x_i2c.o(i.VL_IIC_Read_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_read_multi
</UL>

<P><STRONG><a name="[16b]"></a>VL_IIC_SCL</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vl53l0x_i2c.o(i.VL_IIC_SCL))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[16d]"></a>VL_IIC_SDA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vl53l0x_i2c.o(i.VL_IIC_SDA))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[174]"></a>VL_IIC_Send_Byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, vl53l0x_i2c.o(i.VL_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL_IIC_Send_Byte &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_OUT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Write_nByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_nByte
</UL>

<P><STRONG><a name="[173]"></a>VL_IIC_Start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vl53l0x_i2c.o(i.VL_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL_IIC_Start &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_OUT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Write_nByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_nByte
</UL>

<P><STRONG><a name="[176]"></a>VL_IIC_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vl53l0x_i2c.o(i.VL_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_OUT
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Write_nByte
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_nByte
</UL>

<P><STRONG><a name="[175]"></a>VL_IIC_Wait_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vl53l0x_i2c.o(i.VL_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_SDA_IN
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_READ_SDA
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SDA
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_SCL
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Write_nByte
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_nByte
</UL>

<P><STRONG><a name="[169]"></a>VL_IIC_Write_nByte</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vl53l0x_i2c.o(i.VL_IIC_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_write_multi
</UL>

<P><STRONG><a name="[172]"></a>VL_READ_SDA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vl53l0x_i2c.o(i.VL_READ_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL_READ_SDA
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[171]"></a>VL_SDA_IN</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, vl53l0x_i2c.o(i.VL_SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL_SDA_IN &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
</UL>

<P><STRONG><a name="[16c]"></a>VL_SDA_OUT</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, vl53l0x_i2c.o(i.VL_SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[178]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[77]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTask
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTask
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Pub_Msg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_general_test
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Work
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pal_error
</UL>

<P><STRONG><a name="[1e6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1e7]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[17a]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e8]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[7e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Pub_Msg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Work
</UL>

<P><STRONG><a name="[1e9]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ea]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[19c]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parse_Json_Msg
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[17b]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17c]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17d]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17e]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[17f]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[180]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ec]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ed]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1ee]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[19a]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[49]"></a>createTask</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, scheduler.o(i.createTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = createTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.initTask)
</UL>
<P><STRONG><a name="[16e]"></a>delay_us</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vl53l0x_i2c.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Wait_Ack
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Stop
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Send_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Read_Byte
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_NAck
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL_IIC_Ack
</UL>

<P><STRONG><a name="[18a]"></a>dht11_check</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dht11.o(i.dht11_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dht11_check &rArr; dht11_io_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_io_in
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
</UL>

<P><STRONG><a name="[18b]"></a>dht11_io_in</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dht11.o(i.dht11_io_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dht11_io_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_check
</UL>

<P><STRONG><a name="[18d]"></a>dht11_io_out</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dht11.o(i.dht11_io_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dht11_io_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_rst
</UL>

<P><STRONG><a name="[18e]"></a>dht11_read_bit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, dht11.o(i.dht11_read_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dht11_read_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_byte
</UL>

<P><STRONG><a name="[18f]"></a>dht11_read_byte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dht11.o(i.dht11_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dht11_read_byte &rArr; dht11_read_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
</UL>

<P><STRONG><a name="[76]"></a>dht11_read_data</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, dht11.o(i.dht11_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dht11_read_data &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_rst
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_byte
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_check
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Work
</UL>

<P><STRONG><a name="[190]"></a>dht11_rst</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dht11.o(i.dht11_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dht11_rst &rArr; dht11_io_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_io_out
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_data
</UL>

<P><STRONG><a name="[191]"></a>eTaskGetState</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eTaskGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[160]"></a>enable_ref_spads</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, vl53l0x_api_calibration.o(i.enable_ref_spads))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = enable_ref_spads &rArr; get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ref_spad_map
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_aperture
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ref_spad_map
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_good_spad
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_spad_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[164]"></a>enable_spad_bit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vl53l0x_api_calibration.o(i.enable_spad_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enable_spad_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, main.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[163]"></a>get_next_good_spad</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, vl53l0x_api_calibration.o(i.get_next_good_spad))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_next_good_spad
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[192]"></a>get_ref_spad_map</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0x_api_calibration.o(i.get_ref_spad_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_ref_spad_map &rArr; VL53L0X_ReadMulti &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_ReadMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
</UL>

<P><STRONG><a name="[148]"></a>get_sequence_step_timeout</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, vl53l0x_api_core.o(i.get_sequence_step_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdByte
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_decode_timeout
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_us
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_get_measurement_timing_budget_micro_seconds
</UL>

<P><STRONG><a name="[3d]"></a>initTask</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, scheduler.o(i.initTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = initTask &rArr; System_init &rArr; vl53l0x_general_start &rArr; vl53l0x_set_mode &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.FreeRTOS_Start)
</UL>
<P><STRONG><a name="[162]"></a>is_aperture</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vl53l0x_api_calibration.o(i.is_aperture))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_reference_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[36]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = main &rArr; SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[161]"></a>perform_ref_signal_measurement</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, vl53l0x_api_calibration.o(i.perform_ref_signal_measurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[42]"></a>play_music</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, buzzer.o(i.play_music))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = play_music &rArr; HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[f4]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Get_LightIntensity
</UL>

<P><STRONG><a name="[48]"></a>printTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, scheduler.o(i.printTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = printTask &rArr; vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(i.createTask)
</UL>
<P><STRONG><a name="[19f]"></a>print_pal_error</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, vl53l0x.o(i.print_pal_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_pal_error &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetPalErrorString
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
</UL>

<P><STRONG><a name="[1b3]"></a>pvPortMalloc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[1ac]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[127]"></a>sequence_step_enabled</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l0x_api.o(i.sequence_step_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sequence_step_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>

<P><STRONG><a name="[165]"></a>set_ref_spad_map</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l0x_api_calibration.o(i.set_ref_spad_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_ref_spad_map &rArr; VL53L0X_WriteMulti &rArr; VL53L0X_write_multi &rArr; VL_IIC_Write_nByte &rArr; VL_IIC_Wait_Ack &rArr; VL_IIC_Stop &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WriteMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_ref_spads
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_perform_ref_spad_management
</UL>

<P><STRONG><a name="[167]"></a>set_sequence_step_timeout</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, vl53l0x_api_core.o(i.set_sequence_step_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrWord
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_encode_timeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_decode_timeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_calc_timeout_mclks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetVcselPulsePeriod
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetSequenceStepEnables
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_vcsel_pulse_period
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_set_measurement_timing_budget_micro_seconds
</UL>

<P><STRONG><a name="[19b]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a1]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1cd]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1c0]"></a>uxTaskGetSystemState</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tasks.o(i.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[1c1]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1a4]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1ab]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1a2]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1c2]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[89]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[8d]"></a>vPortExitCritical</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a9]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1ca]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[79]"></a>vTaskDelay</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOF_Work
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhotoSensor_Work
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Work
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Work
</UL>

<P><STRONG><a name="[189]"></a>vTaskDelete</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTask
</UL>

<P><STRONG><a name="[1af]"></a>vTaskGetInfo</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, tasks.o(i.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[1ce]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[19d]"></a>vTaskList</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, tasks.o(i.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printTask
</UL>

<P><STRONG><a name="[1b2]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1c4]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[8c]"></a>vTaskStartScheduler</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
</UL>

<P><STRONG><a name="[1b4]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4f]"></a>vTaskSwitchContext</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[1c6]"></a>vl53l0x_Addr_set</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, vl53l0x.o(i.vl53l0x_Addr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vl53l0x_Addr_set &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetDeviceAddress
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pal_error
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_WrByte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_RdWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_reset
</UL>

<P><STRONG><a name="[ff]"></a>vl53l0x_general_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vl53l0x_gen.o(i.vl53l0x_general_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = vl53l0x_general_start &rArr; vl53l0x_set_mode &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[100]"></a>vl53l0x_general_test</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vl53l0x_gen.o(i.vl53l0x_general_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = vl53l0x_general_test &rArr; vl53l0x_start_single_test &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_start_single_test
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOF_Work
</UL>

<P><STRONG><a name="[fe]"></a>vl53l0x_init</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, vl53l0x.o(i.vl53l0x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vl53l0x_init &rArr; VL53L0X_DataInit &rArr; VL53L0X_GetDeviceParameters &rArr; VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetDeviceInfo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pal_error
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_init
</UL>

<P><STRONG><a name="[1c9]"></a>vl53l0x_reset</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vl53l0x.o(i.vl53l0x_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vl53l0x_reset &rArr; VL53L0X_DataInit &rArr; VL53L0X_GetDeviceParameters &rArr; VL53L0X_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L0X_get_measurement_timing_budget_micro_seconds &rArr; get_sequence_step_timeout &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_DataInit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_Addr_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_set_mode
</UL>

<P><STRONG><a name="[1c7]"></a>vl53l0x_set_mode</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, vl53l0x_gen.o(i.vl53l0x_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = vl53l0x_set_mode &rArr; VL53L0X_StaticInit &rArr; VL53L0X_perform_ref_spad_management &rArr; perform_ref_signal_measurement &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_StaticInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetXTalkCompensationRateMegaCps
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetVcselPulsePeriod
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetReferenceSpads
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetRefCalibration
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetOffsetCalibrationDataMicroMeter
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckValue
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetLimitCheckEnable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_SetDeviceMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefSpadManagement
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformRefCalibration
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_reset
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_pal_error
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_general_start
</UL>

<P><STRONG><a name="[1c8]"></a>vl53l0x_start_single_test</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vl53l0x_gen.o(i.vl53l0x_start_single_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = vl53l0x_start_single_test &rArr; VL53L0X_PerformSingleRangingMeasurement &rArr; VL53L0X_GetRangingMeasurementData &rArr; VL53L0X_get_pal_range_status &rArr; VL53L0X_GetLimitCheckValue &rArr; VL53L0X_RdWord &rArr; VL53L0X_read_word &rArr; VL53L0X_read_multi &rArr; VL_IIC_Read_nByte &rArr; VL_IIC_Read_Byte &rArr; VL_IIC_NAck &rArr; VL_SDA_OUT &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_PerformSingleRangingMeasurement
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L0X_GetRangeStatusString
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l0x_general_test
</UL>

<P><STRONG><a name="[1c5]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[fb]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8a]"></a>xQueueGenericCreate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
</UL>

<P><STRONG><a name="[86]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
</UL>

<P><STRONG><a name="[c1]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[c2]"></a>xQueueGiveFromISR</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>

<P><STRONG><a name="[82]"></a>xQueueReceive</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Send_Cmd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Esp8266_Receive_Msg
</UL>

<P><STRONG><a name="[f5]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNR_Work
</UL>

<P><STRONG><a name="[1cf]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[8b]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createTask
</UL>

<P><STRONG><a name="[1cc]"></a>xTaskIncrementTick</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1b1]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1b7]"></a>xTaskResumeAll</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a9]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[b4]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b6]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[b7]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32f1xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[a7]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[a8]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[3e]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f1xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[c5]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f1xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[c4]"></a>UART_Receive_IT</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, stm32f1xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_Receive_IT &rArr; HAL_UARTEx_RxEventCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>UART_SetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[cd]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[18c]"></a>delay_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dht11.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_rst
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_read_bit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dht11_check
</UL>

<P><STRONG><a name="[186]"></a>arraySearch</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, core_json.o(i.arraySearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = arraySearch &rArr; nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpaceAndComma
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSearch
</UL>

<P><STRONG><a name="[d0]"></a>getType</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, core_json.o(i.getType))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_SearchConst
</UL>

<P><STRONG><a name="[1bc]"></a>hexToInt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, core_json.o(i.hexToInt))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipOneHexEscape
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDigits
</UL>

<P><STRONG><a name="[cf]"></a>multiSearch</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, core_json.o(i.multiSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = multiSearch &rArr; objectSearch &rArr; nextKeyValuePair &rArr; nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDigits
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objectSearch
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraySearch
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_SearchConst
</UL>

<P><STRONG><a name="[196]"></a>nextKeyValuePair</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, core_json.o(i.nextKeyValuePair))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nextKeyValuePair &rArr; nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipString
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextValue
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objectSearch
</UL>

<P><STRONG><a name="[187]"></a>nextValue</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, core_json.o(i.nextValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCollection
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextKeyValuePair
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraySearch
</UL>

<P><STRONG><a name="[195]"></a>objectSearch</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, core_json.o(i.objectSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = objectSearch &rArr; nextKeyValuePair &rArr; nextValue &rArr; skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnEq
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpaceAndComma
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextKeyValuePair
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSearch
</UL>

<P><STRONG><a name="[d4]"></a>skipAnyScalar</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, core_json.o(i.skipAnyScalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipString
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipNumber
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLiteral
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipScalars
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipObjectScalars
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextValue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Validate
</UL>

<P><STRONG><a name="[d5]"></a>skipCollection</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, core_json.o(i.skipCollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = skipCollection &rArr; skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpaceAndComma
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipScalars
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextValue
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Validate
</UL>

<P><STRONG><a name="[194]"></a>skipDigits</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, core_json.o(i.skipDigits))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = skipDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipNumber
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;multiSearch
</UL>

<P><STRONG><a name="[1bd]"></a>skipEscape</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, core_json.o(i.skipEscape))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipOneHexEscape
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipString
</UL>

<P><STRONG><a name="[1b9]"></a>skipLiteral</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, core_json.o(i.skipLiteral))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = skipLiteral &rArr; strnEq
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnEq
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
</UL>

<P><STRONG><a name="[1ba]"></a>skipNumber</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, core_json.o(i.skipNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = skipNumber &rArr; skipDigits
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipDigits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
</UL>

<P><STRONG><a name="[1bf]"></a>skipObjectScalars</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, core_json.o(i.skipObjectScalars))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipString
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpaceAndComma
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipScalars
</UL>

<P><STRONG><a name="[1be]"></a>skipOneHexEscape</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, core_json.o(i.skipOneHexEscape))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipEscape
</UL>

<P><STRONG><a name="[1bb]"></a>skipScalars</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, core_json.o(i.skipScalars))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = skipScalars &rArr; skipObjectScalars &rArr; skipAnyScalar &rArr; skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpaceAndComma
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipObjectScalars
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCollection
</UL>

<P><STRONG><a name="[d3]"></a>skipSpace</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, core_json.o(i.skipSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skipSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpaceAndComma
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipScalars
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipObjectScalars
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objectSearch
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextKeyValuePair
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraySearch
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JSON_Validate
</UL>

<P><STRONG><a name="[188]"></a>skipSpaceAndComma</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, core_json.o(i.skipSpaceAndComma))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = skipSpaceAndComma &rArr; skipSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipScalars
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipObjectScalars
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipCollection
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objectSearch
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arraySearch
</UL>

<P><STRONG><a name="[197]"></a>skipString</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, core_json.o(i.skipString))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = skipString &rArr; skipEscape &rArr; skipOneHexEscape
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipEscape
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipObjectScalars
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipAnyScalar
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nextKeyValuePair
</UL>

<P><STRONG><a name="[198]"></a>strnEq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, core_json.o(i.strnEq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strnEq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skipLiteral
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objectSearch
</UL>

<P><STRONG><a name="[1a5]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1a7]"></a>prvCopyDataToQueue</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataToQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1ad]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1b0]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1a0]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1a3]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1a8]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[4b]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1aa]"></a>prvInitialiseNewTask</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1ae]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tasks.o(i.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[1c3]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1b5]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b6]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4a]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[181]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[179]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[184]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[183]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[40]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[3b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
